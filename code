// Turbofan estimator- part 2 of project
// constants are only for educational purpose, not accurate

#include <iostream>
#include <iomanip>
#include <limits>
#include <vector>
using namespace std;

struct TFOption {
    string name;    //profile label
    double factor; //multiplier vs baseline unit per km
};

// ------------ helpers ---------------------




















// -------------- calculations ------------------
static double calcFuel (double distanceKm, double perKm) { return distanceKm * perKm; }
static double calcCO2 (double fuelUnits, double co2PerFuel) { return fuelUnits * co2PerFuel; }

static void printTurbofanResults (const string& label,double perKm,double distanceKm,int passengers,double co2PerFuel) {
    double totalFuel = calcFuel (distanceKm, perKm);
    double totalCO2 = calcCO2 (totalFuel, co2PerFuel);

    cout << "\n[" << label << "]\n";
    hr();
    cout << left << setw(30) << "Distance (km)"  << ": " << fixed << setprecision(2) << distanceKm << "\n";
    cout << left << setw(30) << "Passengers"  << ": " << passengers << "\n";
    cout << left << setw(30) << "Fuel per km (units)"  << ": " << perKm << "\n";
    cout << left << setw(30) << "Total fuel
    cout << left << setw(30) <<
    cout << left << setw(30) <<

//calculate thrust
double calculateThrust(string engineType, double airspeed) {
    if (engineType == "turbojet") {
        return airspeed * 0.8;  // lower efficiency
    } else if (engineType == "turbofan") {
        return airspeed * 1.2;  // higher efficiency
    } else {
        return 0; // invalid 
    }
}

//calculate fuel burn 
double calculateFuel(string engineType, double distance) {
    if (engineType == "turbojet") {
        return distance * 5.0;  // turbojets burn more fuel
    } else if (engineType == "turbofan") {
        return distance * 3.0;  // turbofans more efficient
    } else {
        return 0;
    }
}

int main() {
    string engineType;
    double airspeed, distance;

    cout << "Turbofan Efficiency Simulator" << endl;
    cout << "Choose engine type (turbojet/turbofan): ";
    cin >> engineType;

    cout << "Enter airspeed (m/s): ";
    cin >> airspeed;

    cout << "Enter flight distance (km): ";
    cin >> distance;

    // calculate thrust and fuel burn
    double thrust = calculateThrust(engineType, airspeed);
    double fuel = calculateFuel(engineType, distance);

    // results
    cout << fixed << setprecision(2);
    if (thrust > 0) {
        cout << "\n--- Simulation Results ---" << endl;
        cout << "Engine type: " << engineType << endl;
        cout << "Estimated thrust: " << thrust << " kN" << endl;
        cout << "Estimated fuel consumption: " << fuel << " liters" << endl;

        //feedback using switch
        int efficiencyLevel;
        if (engineType == "turbofan") {
            efficiencyLevel = 2;
        } else {
            efficiencyLevel = 1;
        }

        switch (efficiencyLevel) {
            case 1:
                cout << "Turbojets are less efficient and noisier." << endl;
                break;
            case 2:
                cout << "Turbofans are more efficient and quieter, perfect for modern aviation." << endl;
                break;
            default:
                cout << "Invalid engine type entered." << endl;
        }
    } else {
        cout << "Invalid engine type. Please enter either 'turbojet' or 'turbofan'." << endl;
    }

    return 0;
}
